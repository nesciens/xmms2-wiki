I think Collections my be implented with 2 SQL tables.

table "Collections":
 ID (integer key)   - the collection's ID
 key (string)       - the common key to all children
 operator (enum)    - the operator affected on key (equals,sup,less,contains...)
 value (string)     - the matching value

tables "CollectionsEntries":
 ID (integer key)   - the medialib ID
 cid (integer)      - the collection's ID

One medialib entry can be in as many collection as you want. We have to take care of deleting any collection's entries when deleting item from medialib. If clients use almost always collections, database would contain a lot of duplicated data...

-- [[User:Crazy | Crazy]] 03 Apr 2006


When refactoring the playlist stuff, I have a sort of "queued playback commands" in mind.
Imagine thoses commands as simple playlist/collection entries.

If you put a stop somewhere into the playlist, the server will stop. If you place a repeat_one behine a song, the song will be repeated.

This would be completely transparent to clients not aware of.
The reason why it better should be implemented into the server is the latency. You cannot do it with enough accuracy via broadcast-notifications.

An idea would be either to somehow use xforms and specify the commands with the url
 command://stop
 command://repeat_one
 command://pause:180 (180 seconds)

Those commands are also added regulary to the mlib as entries which then could be edited (title in preferred language, other properties etc.).

--[[User:Karsten|Karsten]] 18:08, 15 April 2006 (CEST)