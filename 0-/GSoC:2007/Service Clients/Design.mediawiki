==Data Structures==

===Server side===

The service object keeps a registry of available services on the server.  The registry structure is as following:

     Registry                   Entry         
 +---------------+      +--------------------+
 | key1 | entry1------->| name               |
 | key2 | entry2 |      | description        |
 | key3 | entry3 |      | major version      |
 |  .   |   .    |      | minor version      |
 |  .   |   .    |      | methods            |
 |  .   |   .    |      |--------------------|            Method
 +---------------+      | service client fd  |      +----------------+
                        | +----------------+ |      | name           |
                        | | key1 | method1 | |      | description    |
                        | | key2 | method2--------->| return types   |
                        | | key3 | method3 | |      | arg types      |
                        | |  .   |    .    | |      |----------------|
                        | |  .   |    .    | |      | cookie         |
                        | |  .   |    .    | |      +----------------+
                        | +----------------+ |
                        +--------------------+

The '''key in Registry''' is calculated using each service's interface name (e.g. "se.xmms.sc.lastfm").  And the '''key in Entry''' which corresponds to each method is calculated using method's name (e.g. "fetch").

Normal updates that don't change the method signatures are reflected by '''"minor version"''', otherwise '''"major version"''' should be changed.  For example, there is a service called "lastfm" which provides a method "fetch" with two string type arguments, and this is marked as major version 1.  If later on, the author decides that method "fetch" needs an additional int type argument, then the major version number should be changed to a number other than 1.  This scheme is used for clients to decide whether they can correctly use a method or not.

'''"service client fd"''' is the IPC fd created for a service client when it initially connects to the server.  It is used to uniquely identify a service client. Along with '''"cookie"''' in Method structure, IPC can uniquely locate a method in a service client.

'''"cookie"''' field in Method structure is the message cookie which the service client uses to register the method, and subsequently subscribes the callback function to the the broadcast using the result returned.  It helps IPC to locate which service client to send messages to, and also makes sure that the correct service methods are being invoked on service client when the messages arrive.

'''"return types"''' and '''"arg types"''' fields store the information about types of the variables being returned from and passed to the method, respectively.  Each argument stores the name of the argument, the type and optionality information of the argument.  If an argument is optional, it is not necessary to provide this argument when a client is trying to call the method.

So this two level hierarchical structure groups all the methods a service provides together.  Thus easier for locating and categorizing.

===Client side===

 typedef struct xmmsc_service_method_St xmmsc_service_method_t;
 typedef void (*xmmsc_service_notifier_t) (xmmsc_connection_t *conn, xmmsc_result_t *res, xmmsc_service_method_t *method, void *user_data);

The reason that there is no xmmsc_service_t structure is because that it is not needed for any other operations than service registration.  The only thing that will be used in subsequent function calls after service registration is service ID.  On the other hand, xmmsc_service_method_t structure is quite necessary.  It is used in a lot of places like method registration, calling a method, returning from a method, etc.  Besides the normal information of a method, it also contains error messages if there is any during a service client related function call.  You '''do not''' need to free this structure manually, it will be freed automatically when it is no longer needed.

All service method callbacks should be of type xmmsc_service_notifier_t.

==Functions==

===Server side===

Functions below are separated into four groups.

'''Public functions:'''
 xmms_service_t *xmms_service_init (void);
 gboolean xmms_service_handle (xmms_ipc_msg_t *msg, uint32_t cmdid,
                               xmms_socket_t client, xmms_object_cmd_arg_t *arg);

''xmms_service_init()'' is the initialization function of service object.  All it does is to create the first level registry structure and initialize an empty registry.  Then simply registers XMMS_IPC_SIGNAL_SERVICE broadcast to IPC core.

Different from other server-side objects, service object has a central entry point, namely ''xmms_service_handle()''.  All service related calls will end up here in the first place.  The reason of having it is because that service related calls sometimes involve not only one action like subscribing to a signal or execute a command, but also some manipulations on the registry.  Besides, service calls may have more than 6 arguments, which exceeds current IPC limit.  So it has to take care of arguments parsing by itself.  Once the entry function is called, it will delegate the task to the corresponding worker functions.  And then decides whether or not it should subscribe the calling client to XMMS_IPC_SIGNAL_SERVICE broadcast.

'''Registry creation/deletion:'''
 static xmms_service_entry_t *xmms_service_entry_new (gchar *name,
                                                      gchar *description,
                                                      guint major, guint minor,
                                                      xmms_socket_t client);
 static xmms_service_method_t *xmms_service_method_new (gchar *name,
                                                        gchar *description,
                                                        guint cookie,
                                                        gchar *ret_type,
                                                        guint num_args,
                                                        gchar *args);
 static void xmms_service_destroy (xmms_object_t *object);
 static void xmms_service_registry_destroy (gpointer value);
 static void xmms_service_method_destroy (gpointer value);

'''Registry management:'''
 static gboolean xmms_service_register (xmms_ipc_msg_t *msg, xmms_socket_t client,
                                        xmms_error_t *err);
 static gboolean xmms_service_method_register (xmms_ipc_msg_t *msg,
                                               xmms_service_entry_t *entry,
                                               xmms_error_t *err);
 static void xmms_service_unregister (xmms_ipc_msg_t *msg, xmms_socket_t client,
                                      xmms_error_t *err);
 static gboolean xmms_service_method_unregister (xmms_ipc_msg_t *msg,
                                                 xmms_service_entry_t *entry,
                                                 xmms_error_t *err);
 static void xmms_service_list (xmms_ipc_msg_t *msg, xmms_object_cmd_arg_t *arg);
 static void xmms_service_list_method (xmms_ipc_msg_t *msg,
                                       xmms_object_cmd_arg_t *arg);

'''Helper functions:'''
 static xmms_service_entry_t *xmms_service_is_registered (gchar *name);
 static xmms_service_method_t *
 xmms_service_is_method_registered (xmms_service_entry_t *entry, gchar *name);
 static gboolean xmms_service_matchsc (gpointer key, gpointer value,
                                       gpointer data);
 static void xmms_service_foreach (gpointer key, gpointer value, gpointer data);

===Client side===

Much simpler than server-side functions, client-side functions basically fall into the category of registry management.
 xmmsc_result_t *xmmsc_service_register (xmmsc_connection_t *conn,
                                         xmmsc_service_t *service,
                                         xmmsc_service_method_t *method,
                                         void *user_data);
 xmmsc_result_t *
 xmmsc_service_register_full (xmmsc_connection_t *conn,
                              xmmsc_service_t *service,
                              xmmsc_service_method_t *method,
                              void *user_data,
                              xmmsc_user_data_free_func_t free_func);
 xmmsc_result_t *xmmsc_service_unregister (xmmsc_connection_t *conn,
                                           char *service,
                                           char *method);
 xmmsc_result_t *xmmsc_service_list_service_ids (xmmsc_connection_t *conn);
 xmmsc_result_t *xmmsc_service_list_service (xmmsc_connection_t *conn,
                                             char *service);
 xmmsc_result_t *xmmsc_service_list_method_ids (xmmsc_connection_t *conn,
                                                char *service);
 xmmsc_result_t *xmmsc_service_list_method (xmmsc_connection_t *conn,
                                            char *service, char *method);

Go back to [[Summer of Code 2007/Service Clients|Service Client Summary]].