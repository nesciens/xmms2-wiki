==Server Data Structure==

The service object keeps a registry of available services on the server.  The registry structure is as following:

     Registry                   Entry         
 +---------------+      +--------------------+
 | key1 | entry1------->| name               |
 | key2 | entry2 |      | description        |
 | key3 | entry3 |      | major version      |
 |  .   |   .    |      | minor version      |
 |  .   |   .    |      | service client     |            Method
 |  .   |   .    |      |--------------------|      +----------------+
 +---------------+      | count              |      | name           |
                        | +----------------+ |      | description    |
                        | | key1 | method1--------->| clients        |
                        | | key2 | method2 | |      | cookie         |
                        | | key3 | method3 | |      | return types   |
                        | |  .   |    .    | |      | number of args |
                        | |  .   |    .    | |      | arg types      |
                        | |  .   |    .    | |      +----------------+
                        | +----------------+ |
                        +--------------------+

The '''key in Registry''' is calculated using each service's interface name (e.g. "se.xmms.sc.lastfm").  And the '''key in Entry''' which corresponds to each method is calculated using method's name (e.g. "fetch").

Normal updates that don't change the method signatures are reflected by '''"minor version"''', otherwise '''"major version"''' should be changed.  For example, there is a service called "lastfm" which provides a method "fetch" with two string type arguments, and this is marked as major version 1.  If later on, the author decides that method "fetch" needs an additional int type argument, then the major version number should be changed to a number other than 1.  This scheme is used for clients to decide whether they can correctly use a method or not.

'''"count"''' in Entry is a reference count of the number of methods currently registered for this service.

'''"clients"''' field in Method structure is a list of cookies of all the clients which are currently using this method.  So when the method returns, IPC knows which call from which client should get the result.

The role '''"cookie"''' field plays is similar to that of "clients".  It helps IPC to locate which service client to send messages to, and also makes sure that the correct service methods are being invoked on service client when the messages arrive.

'''"return types"''' and '''"arg types"''' fields store the information about types of the variables being returned from and passed to the method, respectively.  And they should be in the following form.  Say you have a method which has the following signatures, call_me (char *, uint32_t, int32_t, xmmsc_coll_t), then the "arg types" field for this method would contain the following string, "suic", meaning that the first argument is of type string ('s'), the second argument is of type unsigned int ('u'), the third argument is of type int ('i'), and the last argument is of type collection ('c').  An empty return types and/or arg types field is also allowed.  This is similar to the format string in standard C function printf(), but without '%' and with different shorthands.  The following table shows the conversion specifiers of all available types, note that they are all in lowercase.

{| class="wikitable" style="text-align:center;margin: 1em auto 1em auto"
|+Conversion Specifiers
|-
! Specifier !! Type !! Description
|-
! i
| int32_t
| 32-bit integer
|-
! u
| uint32_t
| unsigned 32-bit integer
|-
! f
| float
| single precision floating point
|-
! s
| char *
| character string
|-
! l
| char *[]
| character string list
|-
! c
| xmmsc_coll_t
| collection
|-
! b
| unsigned char *
| binary data
|}

So this two level hierarchical structure groups all the methods a service provides together.  Thus easier for locating and categorizing.

==Functions==

===Server side===

Functions below are separated into four groups.

'''Public functions:'''
 xmms_service_t *xmms_service_init (void);
 gboolean xmms_service_handle (xmms_ipc_msg_t *msg, uint32_t cmdid,
                               xmms_socket_t client, xmms_object_cmd_arg_t *arg);

''xmms_service_init()'' is the initialization function of service object.  All it does is to create the first level registry structure and initialize an empty registry.  Then simply registers XMMS_IPC_SIGNAL_SERVICE broadcast to IPC core.

Different from other server-side objects, service object has a central entry point, namely ''xmms_service_handle()''.  All service related calls will end up here in the first place.  The reason of having it is because that service related calls sometimes involve not only one action like subscribing to a signal or execute a command, but also some manipulations on the registry.  Besides, service calls may have more than 6 arguments, which exceeds current IPC limit.  So it has to take care of arguments parsing by itself.  Once the entry function is called, it will delegate the task to the corresponding worker functions.  And then decides whether or not it should subscribe the calling client to XMMS_IPC_SIGNAL_SERVICE broadcast.

'''Registry creation/deletion:'''
 static xmms_service_entry_t *xmms_service_entry_new (gchar *name,
                                                      gchar *description,
                                                      guint major, guint minor,
                                                      xmms_socket_t client);
 static xmms_service_method_t *xmms_service_method_new (gchar *name,
                                                        gchar *description,
                                                        guint cookie,
                                                        gchar *ret_type,
                                                        guint num_args,
                                                        gchar *args);
 static void xmms_service_destroy (xmms_object_t *object);
 static void xmms_service_registry_destroy (gpointer value);
 static void xmms_service_method_destroy (gpointer value);

'''Registry management:'''
 static gboolean xmms_service_register (xmms_ipc_msg_t *msg, xmms_socket_t client,
                                        xmms_error_t *err);
 static gboolean xmms_service_method_register (xmms_ipc_msg_t *msg,
                                               xmms_service_entry_t *entry,
                                               xmms_error_t *err);
 static void xmms_service_unregister (xmms_ipc_msg_t *msg, xmms_socket_t client,
                                      xmms_error_t *err);
 static gboolean xmms_service_method_unregister (xmms_ipc_msg_t *msg,
                                                 xmms_service_entry_t *entry,
                                                 xmms_error_t *err);
 static void xmms_service_list (xmms_ipc_msg_t *msg, xmms_object_cmd_arg_t *arg);
 static void xmms_service_list_method (xmms_ipc_msg_t *msg,
                                       xmms_object_cmd_arg_t *arg);

'''Helper functions:'''
 static xmms_service_entry_t *xmms_service_is_registered (gchar *name);
 static xmms_service_method_t *
 xmms_service_is_method_registered (xmms_service_entry_t *entry, gchar *name);
 static gboolean xmms_service_matchsc (gpointer key, gpointer value,
                                       gpointer data);
 static void xmms_service_foreach (gpointer key, gpointer value, gpointer data);

===Client side===


Go back to [[Summer of Code 2007/Service Clients|Service Client Summary]].