This is an early description of the concept of changeable metadata profiles in xmms2.  I have placed it here for public comment.  I will revise it over the next one or two months as I begin work on it in a private branch of xmms2-devel. 
[[User:Nollidj|nollidj]] 13:07, 17 September 2007 (CEST)

== Overview ==
The medialib should not be limited to cataloging a static or hard-coded set of fields.  Users should be able to determine which metadata fields they care about in their media library, tell medialib this, and search their media library using these fields.  Conversely, users should not need to know a great deal about the different tagging formats that their media streamsare using and have a simple set of fields in their medialib that still give them a powerful search.
== Elaboration ==

An MP3 file tagged with id3v2 may have values in the TCOM (composer), TOPE (original artist/performer), TPE1 (lead performer), TPE2 (ensemble/accompaniment), TPE3 (conductor/specific performer), and TPE4 (remixer or whatever else you want) fields.  An Ogg Vorbis file may have its own Vorbis comments with keys "composer", "artist", "soloist", "ensemble", "conductor", and "performer".

A power user who really cares about how their data are presented (or someone who is as neurotic about tagging their music as I am) will want to be able to search their music library according to these fields.  They may even go so far as to want their playlists or "currently playing" items to be labeled according to metadata pulled from these fields.  There are bugs like [http://bugs.xmms2.xmms.se/view.php?id=384 this one] indicating as much.

A naive user may not particularly care how their music is tagged.  Under such circumstances, all of these fields should still be accessible but not foisted upon the user.  (Maybe the fields would still be searchable but displayed only as various values for the "artist" of the stream, so that a naive user could search for "Wagner", "Boston Pops", "Solti", or "Masur" without worrying about which metadata field to search in.)

Right now, the public medialib tags in medialib.h define a set of metadata keys.  xform plugins such as those for FLAC and id3v2 provide a mapping from the metadata fields of their respective stream formats to this public metadata keyset.  There should be a programmable interface for this mapping so that a user can, through a client, declare that the medialib should consist of a given set of fields (for example, "composer", "performer", and "ensemble").  Additionally, each xform plugin that exports metadata fields needs to have a mapping for those of its fields which should be mapped to public fields.

{|
|+ Example metadata mapping -- power user
! Public field name !! FLAC field key(s) !! id3v2 frame name(s)
|-
|composer || composer || TCOM
|-
|ensemble || ensemble || TPE2
|-
|performer || performer || TPE1, TPE3
|-
|title || title || TIT1, TIT2, TIT3
|-
|discnumber || discnumber || TPOS
|-
|tracknumber || tracknumber || TRCK
|-
|album || album || TIT1
|}

{|
|+ Example metadata mapping -- naive user
! Public field name !! FLAC field key(s) !! id3v2 frame name(s)
|-
|artist || composer, ensemble, performer || TCOM, TPE1, TPE2, TPE3
|-
|title || title || TIT1, TIT2, TIT3
|-
|album || album || TIT1
|-
|discnumber || discnumber || TPOS
|-
|tracknumber || tracknumber || TRCK
|}

=== The interpretation of profiles ===

To be filled in.

== Issues ==

* Make sure this will play nicely with the current "default" public metadata profile.
* How to integrate this with properties as per [[generic properties policy]]?
* How will this play with the ability to write metadata to song files?

=== Possible future work ===

Most of these ideas probably entail pushing too much logic into metadata profiles, violating the [http://en.wikipedia.org/wiki/KISS_principle KISS principle].

* Defined types and parsing logic for different fields (so as to improve storage and searching of dates, lengths of time, other typed fields?)
* Namespaces for public metadata profiles (to allow multiple profiles to be loaded at once, e.g., Dublin Core, some standard profile, and my personal profile)
* Allow interaction between profile and values of metadata fields (e.g., if "genre" field is "opera" or "theater", look for "act" and "scene" fields; otherwise, just set them to NULL)