{{GSoCProject
|student=[[User:darkk|Leonid Evdokimov]]
|mentor=[[User:Anders Gustafsson|Anders Waldenborg]]
|cmilestone=[[Summer of Code 2008/GenIPC/Milestones#Student_accepted|Student accepted]]
|nmilestone=[[Summer of Code 2008/GenIPC/Milestones#TBD|TBD]]
|description=
client library code generator that should ease consistent API definition.

|links=

[[Talk:Summer_of_Code_2007/Generated_IPC|Ancient scroll]]

[[Design_of_XMMS2#Client_library|Legacy library]]
}}

That's temporary place to unload mess from the brain to.

== Q & A == <!-- to make a brain a bit happier -->
=== Primitives that are NOT generated ===
* Low-level IPC that knows nothing about XMMS2
** connect(URL), that should register itself within mainloop too
** buffered(?) write
** reading bytes and sending them to upper layer, it's GenIPC work to split stream into packets
** forcing disconnection
* Serialization to basic types:
** Â«int32Â» and Â«uint32Â» â€” should be sent in network-byte order
** Â«stringÂ» â€” should be sent in UTF-8 encoding
** Â«dataÂ» â€” some set of bytes that should fit in memory, sending DVD images over XMMS2 is not the best idea

=== Will be legacy API generated? ===
'''NO''', it makes things too low-level.

=== Protocol changes ===
Right now every message sent to server looks like:
{| class="wikitable"
! data || meaning
|-
| Type of Object ID || Reserved integer, almost like IANA's TCP ports.
|-
| Method ID || Another hardcoded integer
|-
| Object ID || Playlist name, collection name, medialib entry id
|-
| payload || some weird bytes
|}

Well, that's cool, but RESERVED NUMBERS?!

Why am I against reserved numbers? That's easy, XML does not have numbers inside, any text description does not have any reserved numbers inside.

Adding reserved numbers to text description makes things worse, they need maintaining, they should preserve compatibility. Reserved number should be generated and all we have are names of "class", "method" and/or "property". Reserved number should remain persistent in case of reordering entries in XML file.

Destroying reserved numbers and replacing reserved numbers with reserved words makes service clients more natural.

Should it be possible to register two instances of same "service client" in case of name collision?<br>
No, only one client should do actual work, other clients should listen for an event about the work done, though spying function calls MAY be useful.

There are two major types of Xmms2 objects that are manipulated with API: Singleton/Monostate objects (like "stats" or "medialib") and "numerous" objects, e.g. playlists or collections that have some identifier attached.<br>
It should be possible to apply any function to any numerous object, e.g. it should be possible to shuffle stored playlist (well, xmms2d may return "non implemented" error at first).

=== Limiting expressions for numeric properties ===
 LOGICAL_EXP: 'NOT' LOGICAL_EXP
            | LOGICAL_EXP "AND" LOGICAL_EXP
            | LOGICAL_EXP "OR" LOGICAL_EXP
            | '(' LOGICAL_EXP ')'
            | 'TRUE'
            | 'FALSE'
            | MATH_EXP '<' MATH_EXP
            | MATH_EXP '>' MATH_EXP
            | MATH_EXP '<=' MATH_EXP
            | MATH_EXP '>=' MATH_EXP
            | MATH_EXP '==' MATH_EXP
 
 MATH_EXP: 'actual_value'
         | 'actual_time'
         | 'last_sent_value'
         | 'last_sent_time'
         | '(' MATH_EXP ')'
         | NUMERIC
         | MATH_EXP '+' MATH_EXP
         | MATH_EXP '-' MATH_EXP
         | MATH_EXP '*' MATH_EXP
         | MATH_EXP '/' MATH_EXP
 
 NUMERIC: /* some integer or floating number */

I hope, nobody wants "sin" and "log".

Maybe I should use BC as a library?

== Object properties ==
Property manipulation functions, every function returns new value:
* numerical types:
** type add(type X)
** type sub(type X)
** type set(type X)
** type get()

=== Playlists ===
Static methods:
* list<string> list()
* <del>string current()</del><br>it becomes impossible to have two playback streams with different playlist
* PlaylistObject create(string name)
Object methods:
* void ->remove()
* void ->shuffle()
* void ->insert(string url, bool recursive = false, int pos = -1)<br>non-encoded URL should be given
* void ->insert(int track_id, int pos = -1)<br>'''WTF''': that's just a helper, it creates idlist internally
* void ->insert(collection idlist, int pos = -1)
* void ->insert(collection coll, list<string> order, int pos = -1)
* void ->clear(int position)
* void ->clear()
* list<int> ->list()
* void ->sort(list<string> order)
* void ->move(int old_pos, int new_pos)
* void ->load()
Object's data members:
* int ->position<br>

=== Playback ===
Types:
* enumeration status { PLAY, STOP, PAUSE }

Static methods:
* list<string> list()
* PlaybackObject create(string name)
Object's data members:
* enumeration status ->status<br>status.set(PLAY) while playing ~= tickle(), i.e. forcing decoding the song at <code>Playlist(this->playlist).position</code>
* string ->playlist
* int ->timestamp_ms
* int ->timestamp_samples
* int ->volume[string channel]
* <del>int ->current_id</del><br>readonly<br>'''FIXME''': why does it exist?

== WIP mark ==
{{Update
}}