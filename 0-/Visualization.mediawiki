{{Template:Discussion}}


Some thoughts on visualisation...


It is trivial. All that has to be done is feeding some vis-data to the
clients. :)

"Vis-data" denotes raw pcm-data and perhaps fft-data aswell. Using wavelets for processing the pcm-data could also be considered. "Feeding" means that the server should give the data to clients in an efficient way, easy to digest for the clients and abstracted nicely in the clientlib.


A client should be able to request raw pcm-data to give full flexibility. There are two ways to do it:

* Give the client only the best data available (raw pcm, good sampleformat, high samplerate)
: Pros:
:# no mess with different configuration possibilities
:# simple interface, clean implementation on the server side
: Cons:
:# clients have to implement FFT etc. themselves
:# makes porting existing visualization plugins harder, too much code for "simple visualization" (like builtin a normal client window) 
:# all the data has to be shared/transmitted, even if it is mostly unused (bad for UDP, see below)

* Let the client decide its data format, give some configuration options
: PCM: sampleformat (needed?), samplerate
: FFT: windowsize, freq. range, number of bands (, logarithm?)
: Wavelet? (perhaps too specific, was requested on #xmms2 some time ago)

: Pros:
:* data is processed the same (good) way regardless of the visualization client (which could do it a bad way)
:* client developers don't have to bother how to get the data in the right way

: Cons:
:* configuration options could not be sufficient for clients, so they have to fallback to raw pcm or default fft data anyway
:* server has to deal with more stuff



Client communication should:
* Allow multiple clients.
* Have low overhead.
* Be robust, a client should not be able to block other clients, or even worse the server.
* Drop data instead of wait if the clients are lagging.
* Have timing information, so clients know when the sound from the data will be in the speakers.

Multiple clients are not strictly needed, most people will probably
just run one vis client. But multiple clients are really the main
feature of XMMS2, so it just should be implemented.


Low overhead sounds like an SHM mechanism, doesn't it? Just needs to
make sure that server doesn't write to the same place that the client
is reading from.

Designing this mechanism will probably be the hard part. Should the
control-messages be passed over standard xmmsipc or over shm? How will
the robustness be ensured?

Possible solution: Using semaphores aside the shm; the semaphore could be increased by the server every time new data is available, so the client just can wait (sleep) using the semaphore mechanism. The server can then poll on the semaphore instead of trying to decrease it, so don't wait for the client at all but skip frames. Control communication should not be needed during normal operation. 

Note that if the server decides to skip a frame, this would not prevent the server from starting to write while the  client is reading. So possibly data is not consistent. Should vis-data consistency be guaranteed?

: Consistency of vis data doesn't really matter (it can have a "interlaced" effect), although if the data format can be changed on the fly, it _does_ matter -- ypnos
: Probably it is not necessary to change the format on the fly, if the client really wants another format then it could just request a new vis object. -- mat
: It's not necessary but a nice feature; Some of the data's format depends on user configuration, and clients could provide on-the-fly configuration, and this would run smoother without the re-opening overhead. -- ypnos

In pseudocode it could look like this:

<code>  
       server:                                       client:

       semaphore = 0
       loop:                                         loop:
           write_vis_data                                wait_decrease(semaphore)
           increase(semaphore)                           read_vis_data
           while NOT skipFrame                           increase(semaphore)
               wait a little bit
           no_wait_decrease(semaphore)   

</code>

The better solution to this is to use two semaphores, which burry a deeper knowledge of the situation:
One semaphore stands for "client is ready to read (ie, doesn't read anymore)", the other one for "server has new data" (ie finished writing new data); these semaphores can be used in circle, IE one party raises them, the other one lowers them. combined, they provide access control. -- ypnos

    server:                            client:

    s_semaphore = 0                    c_semaphore = 1
    loop:                              loop:
        no_wait_decrease(c_semaphore)      decrease(s_semaphore)
        write_vis_data                     read_vis_data
        increase(s_semaphore)              increase(c_semaphore)

Clarification about "no_wait_decrease": The server _has_ to wait for the client to increase the semaphore. But it shouldn't do it blockingly, but instead poll the semaphore's value and: if decrease possible, do it etc.; if not, skip this frame and try again on next update time.

The c_semaphore could be used to detect if the client died, ie check if it has not been increased for a while. Maybe it is even possible to calculate the best frame update frequency with it, by looking at how many times per second c_semaphore gets increased.
: Re-calculating update frequency is more interesting on UDP connections, because of bandwidth problems. You need talk-back (IPC) from the client for this to work, though. This talkback possibility could also be used with SHM to alter the framework. Your idea on crash-detection is nice, but we already have an open IPC connection. if the client crashes, this will close automatically, which can be recognized -- ypnos

The overall communication process could be:

# Client requests vis data, giving options like: format and type (pcm,fft,both), update frequency
# Server creates SHM and sends back its ID
# Server updating SHM, client reading; no need for further control messages here

Step 3 is repeated until client cancels or disconnects. -- mat
: I would let the client create the SHM, as with UDP, it's also the client who opens the listening port -- ypnos


There are other things that might be nice, but not necessary:
* Fallback to udp when on remote machine: should be transparent to the vis client, as well - some people tend to say this is a "must-have"!
* Fallback to standard xmmsipc?

Another interesting project concerning visualization would be to implement a plugin that integrates libvisual [http://localhost.nl/~synap/libvisual]. It is a framework designed to act as a middle layer between media players and actual visualization applications. Benefit would be that there are already several applications available that could be used with XMMS2.

: I already talked to the libvisual guys, they are very helpful and writing a client for libvisual should be very easy! -- ypnos