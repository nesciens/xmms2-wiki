'''''DRAFT'''''

;MPRIS
:Media Player Remote Interfacing Specification

== Definitions ==

=== "Media Player" ===

An application, either with GUI or GUI-less (or which allows for both modes of operation) which is capable of playing back audio/video streams. The means by which it does accomplish that (e.g. which audio backend to use, and which output method) is out of the scope of this document.

The "Media Player" '''must''':
* Be able to play back at least local storage file streams.
* Be able to play back at least one stream at a time.

=== "Client" ===

The Client is an unspecified application that will interact with the "Media Player" using D-Bus protocol.
For example:

* A softphone, that pauses, or step the volume down, when a call is being received.
* An applet that nicely integrates in your desktop environment, to control your "Media Player".
* An instant messaging client which informs your buddies of what you're listening to.
* A monitor that stores in a database what you are listening to, for statistics purpose.
* A video editing software that calls an external "Media Player" to preview your work.

=== "Tracklist" ===

A list of media files which resides within the "Media Player", and whose implementation is opaque to the remote interface.
TrackList is an optional D-Bus object

The "Tracklist" '''must''':
* Hold an ordered list of locations of the media files as URIs (e.g. file:// or <nowiki>http://</nowiki>). The implementation of this can be opaque, which means, it does not neccesarily need to store URIs, but upon remote request, it must be able to return an URI for a given media file.
* Keep the list in an ordered fashion. The order can be changed at any time trough e.g. sorting algorithms, in which case the "Media Player" must send information about the reordering trough it's remote interface

The "Tracklist" '''can''', but does not '''need''' to:
* Hold "Metadata" about media files

=== "Metadata" ===

"Metadata" is data that the medias carry within themselves as a means of self-identification (commonly known as "tags"), or data that has been retrieved about the files trough other means, e.g. an internet service that provides additional data about particular media files.

"Metadata" is an array of dict entries in the form (string, variant) eg: {sv}.

There is only one mandatory field : location
The list of optional fields is on [[MPRIS_Metadata]]

===== "location" =====
* Stores an url or a file path to the media

== D-Bus ==

=== DBus Stuff ===

Each player can request an own bus name as it likes, except that the prefix must be "org.mpris" and that the suffix must not contain the '.' character. For example:

* org.mpris.vlc
* org.mpris.bmp
* org.mpris.xmms2

=== The interface ===

All methods must be accessed through the interface org.freedesktop.MediaPlayer

i.e. calling Quit with qdbus on VLC would be:
 $ qdbus org.mpris.vlc /Player org.freedesktop.MediaPlayer.Quit

== The ''Basic'' interface, ( BMPx/VLC version ) ==

=== The Object Hierarchy ===

* / : Media Player identification

* /Player : Playback control

* /TrackList : TrackList management

== The Methods ==

=== / ===

==== Identity ====
Identify the "Media Player" as in "VLC 0.9.0", "bmpx 0.34.9", "Audacious 1.4.0" ...

   <method name="Identity">
     <arg type="s" direction="out"/>
   </method>

=== /TrackList ===

==== GetMetadata ====
Gives all meta data available for element at given position in the "TrackList"

  <method name="GetMetadata">
    <arg type="i" direction="in" />
    <arg type="a{sv}" direction="out" />
  </method>

==== GetCurrentTrack ====
Return the position of current URI in the "TrackList." The return value is zero-based, so the position of the first URI in the "TrackList" is 0. The behavior of this method is unspecified if there are zero elements in the "TrackList."

   <method name="GetCurrentTrack">
     <arg type="i" direction="out" />
   </method>

==== GetLength ====
Number of elements in the "TrackList"

   <method name="GetLength">
     <arg type="i" direction="out" />
   </method>

==== AddTrack ====
Appends an URI in the "TrackList", play it immediately if the 2nd argument is TRUE

   <method name="AddTrack">
     <arg type="s" />
     <arg type="b" />
   </method>

==== DelTrack ====
Removes an URI from the "TrackList", given its position

   <method name="DelTrack">
     <arg type="i" />
   </method>

==== Loop ====
Toggle playlist loop.

   <method name="Loop">
     <arg type="b" />
   </method>

==== Random ====
Toggle playlist shuffle / random. It may or may not play tracks only once.

   <method name="Random">
     <arg type="b" />
   </method>

=== /Player ===

==== Next ====
Goes to the next element (What if we're at the end? -- '''NOTE''' ''Nothing terrible needs to happen, the player should just ignore it. However UIs, and maybe not only UIs, can receive a hint as to whether there is a next track using the Caps API'')

   <method name="Next">
   </method>

==== Prev ====
Goes to the previous element (what if we're at the beginning? '''See above''')

   <method name="Prev">
   </method>

==== Pause ====
If playing : pause. If paused : unpause

   <method name="Pause">
   </method>

==== Stop ====
Stop playing.

   <method name="Stop">
   </method>

==== Play ====
If playing : rewind to the beginning of current track, else : start playing.

   <method name="Play">
   </method>

==== Repeat ====
Toggle the current track repeat.

   <method name="Repeat">
     <arg type="b" />
   </method>

==== Quit ====
Makes the "Media Player" exit.
'''Subject to change -- don't implement yet if you aren't VLC or BMP'''
 
   <method name="Quit">
   </method>

==== GetStatus ====
Return the status of "Media Player": 0 = Playing, 1 = Paused, 2 = Stopped. ([TODO] Expand the status stuff [Loop? Repeat?])

   <method name="GetStatus">
   <arg type="i" direction="out"/>
   </method>

==== GetMetadata ====
Gives all meta data available for the currently played element

  <method name="GetMetadata">
    <arg type="a{sv}" direction="out" />
  </method>

==== GetCaps ====
Return the "media player"'s current capabilities.

   <method name="GetCaps">
     <arg type="i" direction="out" />
   </signal>

RELATED:

   <signal name="CapsChange">
     <arg type="i" />
   </signal>


{|
|CAN_GO_NEXT||There is a current next track, or at least something that equals to it (that is, the remote can call the 'Next' method on the interface, and expect something to happen, heh)
|-
|CAN_GO_PREV||Same as for NEXT, just previous track/something
|-
|CAN_PAUSE||Can currently pause. This might not always be possible, and is yet another hint for frontends as to what to indicate
|-
|CAN_PLAY||Whether playback can currently be started. This might not be the case if e.g. the playlist is empty in a player, or similar conditions. Here, again, it is entirely up to the player to decide when it can play or not, and it should signalize this using the caps API.
|-
|CAN_SEEK||Whether seeking is possible with the currently played stream (UIs/frontends can then enable/disable seeking controls)
|-
|CAN_PROVIDE_METADATA||Whether metadata can be acquired for the currently played stream/source using GetMetadata at all.
|-
|PROVIDES_TIMING||[TODO] Should this really be caps, not flags?
|}

Note that the caps are a bitfield, currently defined as:


          NONE                  = 0,
          CAN_GO_NEXT           = 1 << 0,
          CAN_GO_PREV           = 1 << 1,
          CAN_PAUSE             = 1 << 2,
          CAN_PLAY              = 1 << 3,
          CAN_SEEK              = 1 << 4,
          CAN_PROVIDE_METADATA  = 1 << 5,
          PROVIDES_TIMING       = 1 << 6,

==== VolumeSet ====
Sets the volume (argument must be in [0;100])

   <method name="VolumeSet">
   <arg type="i"/>
   </method>

==== VolumeGet ====
Returns the current volume (must be in [0;100])
 
   <method name="VolumeGet">
   <arg type="i" direction="out"/>
   </method>

==== PositionSet ====
Sets the playing position (argument must be in [0;<track_length>] in milliseconds)

   <method name="PositionSet">
   <arg type="i"/>
   </method>

==== PositionGet ====
Returns the playing position (will be [0;<track_length>] in milliseconds)
 
   <method name="PositionGet">
   <arg type="i" direction="out"/>
   </method>

=== The signals ===

Signals must be emitted from /Player path and org.freedesktop.MediaPlayer interface.

==== TrackChange ==== 
Signal is emitted when the "Media Player" plays another "Track". Argument of the signal is the metadata attached to the new "Track"

   <signal name="TrackChange">
     <arg type="a{sv}"/>
   </signal>

==== StatusChange ==== 
Signal is emitted when the status of the "Media Player" change. The argument has the same meaning as the value returned by GetStatus.

   <signal name="StatusChange">
    <arg type="i"/>
   </signal>

==== CapsChange ==== 
Signal is emitted when the "Media Player" changes capabilities, Flags are CAN_GO_NEXT CAN_GO_PREV CAN_PAUSE CAN_PLAY CAN_SEEK CAN_PROVIDE_METADATA PROVIDES_TIMING. See [[#GetCaps|GetCaps method]]

   <signal name="CapsChange">
     <arg type="i" />
   </signal>