'''''DRAFT'''''

;MPRIS
:Media Player Remote Interfacing Specification

== Definitions ==

=== "Tracklist" ===

The "Tracklist" '''must''':
* Hold an ordered list of locations of the media files as URIs (e.g. file://, <nowiki>http://</nowiki>, mms:// ...).
* Keep the list in an ordered fashion. The order can be changed at any time trough e.g. sorting algorithms, in which case the "Media Player" must send information about the reordering trough it's remote interface

The "Tracklist" holds "Metadata" about media:

=== "Metadata" ===

* "Metadata" represents the informations associated with a media, such as its name, its performer, its length ...
* "Metadata" is an array of dict entries in the form (string, variant) eg: {sv}.

* There is only one mandatory field : location
* The list of optional fields is on [[MPRIS_Metadata]]

===== "location" =====
* Stores an url to the media (local files are represented as a file:// url)

== D-Bus ==

=== Naming conventions ===

Each player requests an unique name beginning with "org.mpris".
For example:

* org.mpris.audacious
* org.mpris.bmp
* org.mpris.vlc
* org.mpris.xmms2

=== The Interface ===

All methods must be accessed through the interface org.freedesktop.MediaPlayer

i.e. calling Quit with qdbus on VLC would be:
 $ qdbus org.mpris.vlc /Player org.freedesktop.MediaPlayer.Quit

== The Object Hierarchy ==

* / : Media Player identification

* /Player : Playback control

* /TrackList : TrackList management

== The Methods ==

=== / (Root) object ===

==== Identity ====
Identify the "media player" as in "VLC 0.9.0", "bmpx 0.34.9", "Audacious 1.4.0" ...
Returns a string containing the media player identification. 

   <method name="Identity">
     <arg type="s" direction="out"/>
   </method>

==== Quit ====
Makes the "Media Player" exit.
 
   <method name="Quit">
   </method>

=== /TrackList ===

==== GetMetadata ====
Gives all meta data available for element at given position in the "TrackList"

  <method name="GetMetadata">
    <arg type="i" direction="in" />
    <arg type="a{sv}" direction="out" />
  </method>

==== GetCurrentTrack ====
Return the position of current URI in the "TrackList." The return value is zero-based, so the position of the first URI in the "TrackList" is 0. The behavior of this method is unspecified if there are zero elements in the "TrackList."

   <method name="GetCurrentTrack">
     <arg type="i" direction="out" />
   </method>

==== GetLength ====
Number of elements in the "TrackList"

   <method name="GetLength">
     <arg type="i" direction="out" />
   </method>

==== AddTrack ====
Appends an URI in the "TrackList", play it immediately if the 2nd argument is TRUE

   <method name="AddTrack">
     <arg type="s" />
     <arg type="b" />
   </method>

==== DelTrack ====
Removes an URI from the "TrackList", given its position

   <method name="DelTrack">
     <arg type="i" />
   </method>

==== SetLoop ====
Toggle playlist loop.

   <method name="SetLoop">
     <arg type="b" />
   </method>

==== SetRandom ====
Toggle playlist shuffle / random. It may or may not play tracks only once.

   <method name="SetRandom">
     <arg type="b" />
   </method>

=== /Player ===

==== Next ====
Goes to the next element (What if we're at the end? -- '''NOTE''' ''Nothing terrible needs to happen, the player should just ignore it. However UIs, and maybe not only UIs, can receive a hint as to whether there is a next track using the Caps API'')

   <method name="Next">
   </method>

==== Prev ====
Goes to the previous element (what if we're at the beginning? '''See above''')

   <method name="Prev">
   </method>

==== Pause ====
If playing : pause. If paused : unpause

   <method name="Pause">
   </method>

==== Stop ====
Stop playing.

   <method name="Stop">
   </method>

==== Play ====
If playing : rewind to the beginning of current track, else : start playing.

   <method name="Play">
   </method>

==== Repeat ====
Toggle the current track repeat.

   <method name="Repeat">
     <arg type="b" />
   </method>

==== GetStatus ====
Return the status of "Media Player" as a struct of 4 ints:
* First integer: 0 = Playing, 1 = Paused, 2 = Stopped.
* Second interger: 0 = Playing linearly , 1 = Playing randomly.
* Third integer: 0 = Go to the next element once the current has finished playing , 1 = Repeat the current element
* Fourth integer: 0 = Stop playing once the last element has been played, 1 = Never give up playing

   <method name="GetStatus">
   <arg type="(iiii)" direction="out"/>
   </method>

==== GetMetadata ====
Gives all meta data available for the currently played element

  <method name="GetMetadata">
    <arg type="a{sv}" direction="out" />
  </method>

==== GetCaps ====
Return the "media player"'s current capabilities.

   <method name="GetCaps">
     <arg type="i" direction="out" />
   </signal>

RELATED:

   <signal name="CapsChange">
     <arg type="i" />
   </signal>


{|
|CAN_GO_NEXT||There is a current next track, or at least something that equals to it (that is, the remote can call the 'Next' method on the interface, and expect something to happen, heh)
|-
|CAN_GO_PREV||Same as for NEXT, just previous track/something
|-
|CAN_PAUSE||Can currently pause. This might not always be possible, and is yet another hint for frontends as to what to indicate
|-
|CAN_PLAY||Whether playback can currently be started. This might not be the case if e.g. the playlist is empty in a player, or similar conditions. Here, again, it is entirely up to the player to decide when it can play or not, and it should signalize this using the caps API.
|-
|CAN_SEEK||Whether seeking is possible with the currently played stream (UIs/frontends can then enable/disable seeking controls)
|-
|CAN_PROVIDE_METADATA||Whether metadata can be acquired for the currently played stream/source using GetMetadata at all.
|-
|PROVIDES_TIMING||[TODO] Should this really be caps, not flags?
|}

Note that the caps are a bitfield, currently defined as:


          NONE                  = 0,
          CAN_GO_NEXT           = 1 << 0,
          CAN_GO_PREV           = 1 << 1,
          CAN_PAUSE             = 1 << 2,
          CAN_PLAY              = 1 << 3,
          CAN_SEEK              = 1 << 4,
          CAN_PROVIDE_METADATA  = 1 << 5,
          PROVIDES_TIMING       = 1 << 6,

==== VolumeSet ====
Sets the volume (argument must be in [0;100])

   <method name="VolumeSet">
   <arg type="i"/>
   </method>

==== VolumeGet ====
Returns the current volume (must be in [0;100])
 
   <method name="VolumeGet">
   <arg type="i" direction="out"/>
   </method>

==== PositionSet ====
Sets the playing position (argument must be in [0;<track_length>] in milliseconds)

   <method name="PositionSet">
   <arg type="i"/>
   </method>

==== PositionGet ====
Returns the playing position (will be [0;<track_length>] in milliseconds)
 
   <method name="PositionGet">
   <arg type="i" direction="out"/>
   </method>

=== The signals ===

Signals must be emitted from /Player path and org.freedesktop.MediaPlayer interface.

==== TrackChange ==== 
Signal is emitted when the "Media Player" plays another "Track". Argument of the signal is the metadata attached to the new "Track"

   <signal name="TrackChange">
     <arg type="a{sv}"/>
   </signal>

==== StatusChange ==== 
Signal is emitted when the status of the "Media Player" change. The argument has the same meaning as the value returned by GetStatus.

   <signal name="StatusChange">
    <arg type="(iiii)"/>
   </signal>

==== CapsChange ==== 
Signal is emitted when the "Media Player" changes capabilities, Flags are CAN_GO_NEXT CAN_GO_PREV CAN_PAUSE CAN_PLAY CAN_SEEK CAN_PROVIDE_METADATA PROVIDES_TIMING. See [[#GetCaps|GetCaps method]]

   <signal name="CapsChange">
     <arg type="i" />
   </signal>