In the process of porting the collections api to python it becomes apparent that a decision has to be made about how to represent the collections structure.

There are a number of options, two of them are:

''All python examples use Sync API for simplciity''

===Alternative 1===
create a collections class which represents the various collections semantics as properties and attributes (with the occasional method if necessary).

A few examples:

Get an id list from a collection and set it to the id list of a new collection.

 coll_foo = xc.Collection('Foo')
 ids = coll_foo.ids
 idl_coll = xc.Collection(XMMS_COLL_TYPE_IDLIST)
 idl_coll.ids = ids


create a union of collection "Foo" and a custom collection (all media by Sonic Youth), and filter the resulting collection by year (only media from 2006).
 coll = xc.Collection(XMMS_COLL_TYPE_AND);
 # Reference to collection 'Foo'
 operand = xc.Connection(XMMS_COLL_TYPE_REFERENCE);
 operand['reference'] = ('Foo', 'Collections')
 coll.operand.append(operand)
 # All media by Sonic Youth
 operand = xc.Collection(XMMS_COLL_TYPE_MATCH);
 allmedia = xc.Collection(XMMS_COLL_TYPE_UNIVERSE)
 operand.operand.append(allmedia)
 operand['field'] = 'artist'
 operand['value'] = 'Sonic Youth'
 coll.operand.append(operand)
 # Filter media on year 2006
 last = xc.Collection(XMMS_COLL_TYPE_MATCH);
 last['year'] = '2006'
 last.operand.append(coll)

===Alternative 2===
Create a collections class with the same get/set methods as in the c bindings.


===Alternative 3===
Lets cut to the examples directly:

 from xmmsclient import collections as c
 
 coll = c.And(c.Reference('Collections:Foo'),
              c.Match(c.Universe(), {'field': 'artist', 'value': 'Sonic Youth'}),
              c.Match(c.Universe(), {'field': 'year', 'value': '2006'}))

How to use and modify them!
 
 print coll.operands
 # [<Reference>, <Match>, <Match>]
 del coll.operands[0]
 
 coll.operands.append(c.Reference('Collections:Party music'))
 
 print coll.operands
 # [<Match>, <Match>, <Reference>]
 
 # make it persistant on server!
 xc.coll_save(coll, 'Collections', 'My collection')
  
 m = c.Match(c.Universe(), {'field': 'artist', 'value': 'Thievery Corporation'})

 # get a list of ids matching collection
 matchingids = xc.coll_query_id(m)
 
 # I changed my mind..
 m['value'] = 'Air'
 
 songsbyair = xc.coll_query_info(m, ['title', 'duration', 'rating'])
 for song in songsbyair:
   print "%(album)s - %(title)s (%(duration)s)" % song


Other ideas welcome!

[[Category:Developer ideas]]