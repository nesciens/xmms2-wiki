==Introduction==
TurboX2 is one of the more advanced XMMS2 clients around. It has a lot of nice features and an interesting, interface with which to work. TurboX2 has suffered a bit of neglect, and could really use some love to get
it up to release quality. The goal of this Summer of Code project more abstractly is to make a stable release
that can be used without much issue on a number of web browsers and with an ease of installation that a moderately competent user could install and use it. 

==Schedule==
For Checkpoint of 7/8 June - Integrate MochiKit PropDict and ressurect and use /mediainfo controller

==Playlist==
Playlist is now updated atomically thanks to xmms2 async signals, and a javascript based playlist. This makes it possible to get a reasonably well performing playlist that doesn't require reloads. 

==Searching==
Searching of the media library is a goal for the summer. The idea would be to have output that looks something like Apple's Spotlight in the Media Library area:

  --Artists--
     Apanap Korvarasson
     Foobar Players
  --Albums--
     Sausages and Korv
     Songs for Code and Consumption (of the TB kind)
  --Songs--
     My God, I can't make things up well tonight
     These are just random titles

When an entry is clicked it will, in the case of albums and artists, list a general view for that selection, or in the case of songs, add that song to the playlist. 

==Performance==
An issue I always fear about raising with TurboX2 is two fold: scalability and performance. Javascript operations can be expensive, and so can http request operations. In consideration of this there is always a blancing act between what should be done server side and what should be done client side. What I think it comes down to is that the client is best at interface and general looks, with that in mind I think automatically generated templating is not a great idea. The reason the client is better for this is an issue of flexiblity. The browser/client knows what the browser/client can do, information about the actual structure of the page is avaliable to the browser in a way it's not on the server side. So sizing and such can be done a lot better on the client side. The server is better at manipulating a lot of data, so it could be silly to have the client doing much manipulation. The server should push out complete data to the client. So that's why my tendency has been to move rendering and drawing operations into javascript. Still I'm afraid of the performance issues that have recently been reported to me, but I can't seem to reproduce them. I will continue to try different browsers to see if I can get a spike in CPU usage.



==PropDict==
PropDict is more or less complete. I need to MochiKitify a lot of the code, because I'm going to pretend to myself that they do things more efficently then I do. (Though I looked and they iterate over Arrays to find indices just like I do). Otherwise PropDict is working nicely, with support for wildcard sources, has_key and get_value. Only major thing I might do is to throw an exception in the case of a get_value that doesn't return a result for consistency with how Python's PropDict works.

'''Update''': So I decided to pull out those statistics I learned in High School supposidly and run a t-Test on the benchmark linked in resources. It seems that there is no statistically significant difference between the two data sets. Doesn't really matter which I use I guess.

'''Further Updates''': PropDict is now integrated into the Status area and into the Medialib view. They both now also use the /mediainfo controller which means that they do resolving. As in, we put a temp text entry at an ID and then once we have mediainfo we swap out the temp text for real mediainfo data. The advantage of this is that it's half the work necessary to do lazy loading, it also means that you get an indication that things are working before they finish working, and part of the joy of AJAX is constant updates!

==Todo==
:&#10063; Finish JavaScript implementation of PropDict and use it through out TurboX2 
:&#10063; Make TurboX2 at least work on Safari and hopefully on Opera and IE 6
:&#10063; Playlist Optimisation - general optimistation for large lists of data
::&#10063; Do not update the playlist unless its contents have changed
::&#10063; Find or write a lazy loading widget for the playlist and any other large list
::&#10063; Ressurect the /mediainfo controller used to do resolving of mediainfo by ID
:&#10063; General cleanup and refactoring - object orientation for the javascript and python is a plus
::&#10063; Also look into making the Python backend async by somehow tying it into CherryPy's mainloop if possible
:&#10063; Get a working implementation of Views with at least a View that mimics the current artist-album view
:&#10063; Get things working with python's distutils so that TurboX2 can be redistriubted
::&#10063; FreeBSD port!

==Resources==
[http://exodus.xmms.se/~alex/benchmark/test.html Benchmark of PropDict implementations] - The first five are PropDict using MochiKit's findValue() to find indicies of values in an array, the second is using my own method.