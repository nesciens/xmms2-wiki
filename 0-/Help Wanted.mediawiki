The XMMS2 Project has come a long way since 2003, but there are still a lot of rough edges around. If you'd like to help make XMMS2 a more interesting project, then check out the following items..

== Long term wishlist ==
We have a whole bunch of feature requests (and possibly bugs) filed away on our [http://bugs.xmms2.xmms.se/view.php?id=520 Long term wishlist] that we haven't gotten around to implementing or fixing yet. You could poke around there and see if there's anything that interests you.

== Leftover Summer of Code Proposals ==
XMMS2 participated in Google's [[Summer of Code 2006]], with 4 (out of 5) projects successfully completed. However, we did have a number of other interesting proposals that weren't taken up by students (or that couldn't be accepted for various reasons). We'd still like to see some of these ideas worked on, so please have a look through them. (If you're interested in any of the projects, contact the mentor listed, though be advised that you should not necessarily expect any real mentoring on these projects. And no, we're not currently offering bounties on these either.)

{{SoCItem| title=[[Generated IPC | Auto-generated API and bindings]]| description=Currently, the C client library and the bindings (Python, Ruby, etc) have to be manually updated whenever a new function is introduced on the server. This work is tedious and mechanical, and the whole client API could in fact be automatically generated from a high-level description of the functions. The goal is therefore to determine the semantics of these descriptions (possibly using XML), and then use them to generate the different API source files.| lang=Python / XML| level=Advanced| mentor=[[User:Anders Gustafsson | Anders Gustafsson]]}}

{{SoCItem| title=[[Client:Promoe | promoe client]]| description=The [[Client:Promoe | promoe]] client is a Winamp/XMMS1 clone for XMMS2, written in C++/[http://www.trolltech.no Qt4].  It currently supports skins, playback control, playlists and simple media library access, but still lacks most other features offered by XMMS2 (saved playlists, powerful media library browsing, properties modification, etc). It should also be ported to use the new C++ bindings (scheduled for the next release, [[Release:DrEvil | DrEvil]]). Since Promoe is a skinable client this involves a lot of hacking on custom widgets and can be a very good way to learn more about the QT toolkit.| lang=C++| level=Medium| mentor=[[Tobias RundstrÃ¶m]]}}

{{SoCItem| title=Evaluate a Switch to GStreamer| description=A lot of discussion has occurred in the past about the issue of converting XMMS2 to using [http://www.gstreamer.org GStreamer]. This project would be to evaluate the viability of that conversion and maybe do the implementation (proof of concept) if deemed a winning situation. (i.e. doing the conversion would have more pros than cons) On the other hand, if it isn't a winning situation, the outcome could contain suggested improvements to gstreamer to make it more suited for our use. You should probably look at and understand the [[Transforms]] concept currently implemented in XMMS2, when undertaking this task. A student interested in this project should observe that this subject may be highly controversial and flammable and might end in a big bolt of fire.| lang=English / C| level=Flametory| mentor=[[Sham Chukoury]]}}

{{SoCItem| title=Port Visualization to [[Transforms | transforms API]] and extend it to give PCM data| description=Currently visualization in XMMS2's devel branch is disabled with the transition to [[Transforms]]. This project would be to port visualization to the devel branch as a transform plugin and to extend it to give full PCM data.| lang=C| level=Medium to Advanced|mentor=[[User:Anders Gustafsson | Anders Gustafsson]]}}

{{SoCItem| title=Testing| description=Testing XMMS2 is currently done the informal way: build the code, run it and see if it works. The problem with this approach is that it's difficult, if not impossible, to automatically and exhaustively test each component of the system to make sure they work well within their accepted parameters. This task requires you to:
* Develop a test suite, possibly using a unit-testing approach (e.g. with [http://check.sf.net libcheck]) or otherwise, as deemed appropriate.
* Provide recommendations on how to change the development workflow to actively use and maintain the test suite. (to ensure that the test suite doesn't go stale within a few weeks)
* Optionally devise a method for maintaining a 'component status' page based on automated test results. (For an example, see [[Project Status]])| lang=C / Python / Ruby| level=Medium| mentor=[[Sham Chukoury]]}}

{{SoCItem| title=Handle temporarily unavailable media better than removing from medialib| description=This task is fully described with context in [http://bugs.xmms2.xmms.se/view.php?id=519 Bug #519]| lang=C| level=Medium| mentor=[[User:Anders Gustafsson | Anders Gustafsson]]}}