==Grabbing the development tree==
To clone a fresh copy of the development repository:

 git clone git://git.xmms.se/xmms2/xmms2-devel.git

This will create a new directory called "xmms2-devel" with contains the full stable repository with all version history and stuff. It will have all files checked out and will also contain a ".git" subdirectory
which contains all the version-information and crap.

==Hacking==
You started hacking away, and are satisfied with your changes and want to commit them!
To show what files has been changed:

 git status

To show the diff between the files in the repository and your modified files:

 git diff

You can optionally add a filename after diff to show a specific diff.

If you notice that you have made any changes to a file that should not be part of the commit you can just remove the file and do:

 git checkout path/to/the/file

To add new files:

 git add file.foo

As a good engineer you should ofcourse make sure that the tree still compiles and works as supposed before continuing with commit.

When you've checked that everything is in order and you want to commit your work to a changeset:

 git commit -a

Make sure you follow the [[ChangeLog_Format|changelog format]]. The first line will be used as a summary of the changeset and should be kept short and informative. The following lines will be a more verbose description of what changes the changeset brings.

==Getting updates==

To keep in sync with the latest version:

 git pull git://git.xmms.se/xmms2/xmms2-devel.git

==Informal Rebase==
This way you get rid of the ugly 'Merge' changesets and duplicate changesets because of upstream has cherrypicked from your tree.

First create an upstream branch in your tree:

 git pull git://git.xmms.se/xmms2/xmms2-devel +:upstream

The + means that git should not try to merge or be smart or something.


Then you can list the changesets that are in your tree, but not upstream:

 git-rev-list --pretty upstream..master

Or you can do:

 git cherry -v upstream master

Which also lists the diffrence, but doesn't list cherrypicked changesets.


Now create a new branch:

 git branch forupstream upstream

And make it the default branch:

 git checkout -f forupstream

If all the changes you saw in git cherry earlier were good for upstream just put 'em all on this branch:

 for cset in $(git cherry upstream master); do 
   git-cherry-pick -r $cset;
 done

There will be some warnings and stuff, but that is normal. It should say "Finished one cherry-pick." for each cset if everything applies cleanly.

This is a good time to make sure your tree still compiles :)


And if you are satisfied and want to make that your master again, then checkout master:

 git checkout -f master

And go there:

 git reset --hard forupstream 

There, now you're ready to push your changes to your public tree without an ugly merge changeset.

 ssh+git://git.xmms.se/xmms2/xmms2-yourpublicrepository +:refs/heads/master