__TOC__
Tested with the git stable snapshot cae0d4328c6405e36ff0c82b60b58c8daa8efe3e on 30.03.06.

You can get [http://exodus.xmms.se/~nano/win32/xmms2-stable_30_03_06.tar.bz2 the 30.03.06 modified snapshot] and compile it. (to avoid making all the changes to the code)

==Prepare the environment==
*Download [http://www.python.org/ftp/python/2.4.2/python-2.4.2.msi Python 2.4.2] and install it in '''C:\Python24'''
*Download [http://prdownloads.sourceforge.net/scons/scons-0.96.1.win32.exe Scons 0.96.1] and install it in '''C:\Python24'''
*Download [http://prdownloads.sourceforge.net/mingw/MinGW-3.2.0-rc-3.exe MinGW-3.2.0-rc-3] and install it in '''C:\xmms2_mingw'''
:'''Warning''' : other mingw installers or other gcc versions might not work.
*Download [http://prdownloads.sourceforge.net/mingw/MSYS-1.0.10.exe Msys 1.0.10] and install it in '''C:\xmms2_mingw'''. When asked for the post install, answer '''y'''. After that, when asked if you have mingw installed, answer '''y''' and then put the directory '''c:/xmms2_mingw''' (yes, with unix-like slashes).

==Setting up the required libraries and the git snapshot==
*Download [http://exodus.xmms.se/~nano/win32/xmms2_required_libraries.tar.gz xmms2_required_libraries.tar.gz] and put it in '''C:\xmms2_mingw\home\<user>''' 
:Package contents : ''glib 2.8.6'' (include some dependencies) , ''sqlite 3.3.4'' and the ''scons.sh'' script (found in /bin)
*Download the [http://git.xmms.se/snapshot.cgi/xmms2-stable.git-snapshot-HEAD.tar.bz2 git xmms2-stable snapshot], extract it on a unix-like system (I couldn't extract it correctly with any windows extractor) and put the resulted directory in '''C:\xmms2_mingw\home\<user>''' or download [http://exodus.xmms.se/~nano/win32/xmms2-stable_30_03_06.tar.bz2 the 30.03.06 modified snapshot] and extract it in '''C:\xmms2_mingw\home\<user>''' (to avoid making all the changes to the code)

==Changes in the source code (long)==
'''SConstruct line 29'''
*replace
<pre>
if sys.platform == 'win32':
	default_pyrex = 'pyrexc.py'
	default_prefix = 'c:\\xmms2'
	default_cxxflags = ['/Zi', '/TC']
	default_cflags = ['/Zi', '/TC']
	default_cpppath = ['z:\\xmms2\\winlibs\\include']
else:
	default_pyrex = 'pyrexc'
	default_prefix = '/usr/local/'
	default_cxxflags = ['-g', '-Wall', '-O0']
	default_cflags = ['-g', '-Wall', '-O0']
	if sys.platform == 'darwin':
		default_cpppath = ['/sw/lib']
	else:
		default_cpppath = []
</pre>
:with :
<pre>
#if sys.platform == 'win32':
#	default_pyrex = 'pyrexc.py'
#	default_prefix = 'c:\\xmms2'
#	default_cxxflags = ['/Zi', '/TC']
#	default_cflags = ['/Zi', '/TC']
#	default_cpppath = ['z:\\xmms2\\winlibs\\include']
#else:
default_pyrex = 'pyrexc'
default_prefix = '/usr/local/'
default_cxxflags = ['-g', '-Wall', '-O0']
default_cflags = ['-g', '-Wall', '-O0']
if sys.platform == 'darwin':
	default_cpppath = ['/sw/lib']
else:
	default_cpppath = []
</pre>

'''src/include/xmmsc/xmmsc_sockets.h line 8''' :
*replace
<pre>
#ifdef _MSC_VER
</pre>
:with :
<pre>
#ifdef __WIN32__
</pre>

'''src/clients/cli/common.h line 24''' :
*replace
<pre>
#include <sys/ioctl.h>
</pre>
:with :
<pre>

#ifndef __WIN32__
#include <sys/ioctl.h>
#endif
</pre>

'''src/clients/cli/cmd_mlib.c''' line 627 or at the top:
*add
<pre>
#ifdef __WIN32__
#include <windows.h>
char *realpath(const char *pathname, char resolved_path[PATH_MAX])
{
  gint size = 0;
  size = GetFullPathNameA(pathname, PATH_MAX, resolved_path, 0);
  if (size > PATH_MAX)
    {
      return NULL;
    }
  else
    {
      return resolved_path;
    }
}
#endif
</pre>

'''src/clients/cli/common.c line 18''' :
*add
<pre>
#ifdef __WIN32__
#include <windows.h>
extern char *realpath(const char *pathname, char resolved_path[PATH_MAX]);
#endif
</pre>

'''src/clients/cli/common.c line 116''' :
*replace
<pre>
gint
find_terminal_width() {
	gint columns = 0;
	struct winsize ws;
	char *colstr, *endptr;

	if (!ioctl(STDIN_FILENO, TIOCGWINSZ, &ws)) {
		columns = ws.ws_col;
	} 
	else {
		colstr = getenv("COLUMNS");
		if(colstr != NULL) {
			columns = strtol(colstr, &endptr, 10);
		}
	}

	/* Default to 80 columns */
	if(columns <= 0) {
		columns = 80;
	}

	return columns;
}
</pre>
:with :
<pre>
gint
find_terminal_width() {
#ifdef __WIN32__
  return 80;
#else
	gint columns = 0;
	struct winsize ws;
	char *colstr, *endptr;

	if (!ioctl(STDIN_FILENO, TIOCGWINSZ, &ws)) {
		columns = ws.ws_col;
	} 
	else {
		colstr = getenv("COLUMNS");
		if(colstr != NULL) {
			columns = strtol(colstr, &endptr, 10);
		}
	}

	/* Default to 80 columns */
	if(columns <= 0) {
		columns = 80;
	}

	return columns;
#endif
}
</pre>

'''src/clients/cli/main.c line 106''' :
*replace
<pre>
		mkdir (dir, 0755);
</pre>
:with :
<pre>
#ifdef __WIN32__
		mkdir (dir);
#else
		mkdir (dir, 0755);
#endif
</pre>

'''src/clients/cli/main.c line 21''' :
*add
<pre>
#ifdef __WIN32__
#include <io.h>
#endif
</pre>

'''src/clients/lib/xmmsclient/Library line 23''' :
*replace
<pre>
		env.Append(LINKFLAGS=["/DEF:src/clients/lib/xmmsclient/xmmsclient.def"])
</pre>
:with :
<pre>
#		env.Append(LINKFLAGS=["/DEF:src/clients/lib/xmmsclient/xmmsclient.def"])
</pre>

'''src/clients/lib/xmmsclient/xmmsclient.c line 21''' :
*replace
<pre>
#include <pwd.h>
</pre>
:with :
<pre>
#ifndef __WIN32__
#include <pwd.h>
#endif
</pre>

'''src/clients/lib/xmmsclient/xmmsclient.c line 168''' :
*replace
<pre>
	if (!ipcpath) {
		struct passwd *pwd;

		pwd = getpwuid (getuid ());
		if (!pwd || !pwd->pw_name)
			return false;

		snprintf (path, sizeof(path), "unix:///tmp/xmms-ipc-%s", pwd->pw_name);
	} else {
</pre>
:with :
<pre>
#ifndef __WIN32__
	if (!ipcpath) {
		struct passwd *pwd;

		pwd = getpwuid (getuid ());
		if (!pwd || !pwd->pw_name)
			return false;

		snprintf (path, sizeof(path), "unix:///tmp/xmms-ipc-%s", pwd->pw_name);
	} else
#endif
	{
</pre>

'''src/clients/lib/xmmsclient-glib/Library line 8''' :
*add
<pre>
	if env.platform == 'win32':
		env.Prepend(LIBPATH=["src/clients/lib/xmmsclient"])
		env.Append(LIBS=["xmmsclient"])
		env.Prepend(LIBPATH=["src/lib/xmmsipc"])
		env.Append(LIBS=["xmmsipc"])
		env.Prepend(LIBPATH=["src/lib/xmmssocket"])
		env.Append(LIBS=["xmmssocket"])
		env.Append(LIBS=["wsock32"])
		env.Append(LIBS=["ws2_32"])
</pre>

'''src/include/xmmsc/xmmsc_ipc_transport.h line 34''' :
*replace
<pre>
int xmms_ipc_transport_fd_get (xmms_ipc_transport_t *ipct);
</pre>
:with :
<pre>
xmms_socket_t xmms_ipc_transport_fd_get (xmms_ipc_transport_t *ipct);
</pre>

'''src/clients/cli/Program line 18''' :
*add
<pre>
	if env.platform == 'win32':
		env.Append(LIBS=["wsock32"])
</pre>

'''src/clients/et/xmms2-et.c line 24''' :
*replace
<pre>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <sys/utsname.h>
</pre>
:with :
<pre>
#ifdef __WIN32__
#include <winsock2.h>
#else
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/utsname.h>
#endif

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
</pre>

'''src/clients/et/xmms2-et.c line 225''' :
*replace
<pre>
static void
get_systemname (void)
{
	struct utsname uts;

	if (uname (&uts) == 0) {
		system_name = g_strdup_printf ("%s %s %s",
		                               uts.sysname,
		                               uts.release,
		                               uts.machine);
	}
}
</pre>
:with :
<pre>
static void
get_systemname (void)
{
#ifdef __WIN32__
  system_name = g_strdup_printf ("%s", "win32");
#else
	struct utsname uts;

	if (uname (&uts) == 0) {
		system_name = g_strdup_printf ("%s %s %s",
		                               uts.sysname,
		                               uts.release,
		                               uts.machine);
	}
#endif
}
</pre>

'''src/clients/et/xmms2-et.c line 279''' :
<div style="color:red">Warning! this will make xmms2-et unfunctional on windows but it will compile</div>
*replace
<pre>
	inet_aton (DEST_IP, &dest_addr.sin_addr);
</pre>
:with :
<pre>
#ifndef __WIN32__
	inet_aton (DEST_IP, &dest_addr.sin_addr);
#endif
</pre>

'''src/clients/et/Library line 11''' :
*add
<pre>
	if env.platform == 'win32':
		env.Append(LIBS=["wsock32"])
</pre>

'''src/plugins/diskwrite/diskwrite.c line 194''' :
*replace
<pre>
		mkdir (data->destdir, 0755);
</pre>
:with :
<pre>
#ifdef __WIN32__
		mkdir (data->destdir);
#else
		mkdir (data->destdir, 0755);
#endif
</pre>

'''add the file src/xmms/Library containing''' :
<pre>
target="libxmms2d"
systemlibrary=True

source = ["main.c",
          "sample.c", 
          "config.c",
          "mediainfo.c",
          "sqlite.c",
          "decoder.c",
          "medialib.c", 
          "effect.c",
          "object.c",
          "transport.c",
          "error.c",
          "output.c",
          "unixsignal.c",
          "playlist.c",
          "visualisation.c",
          "ipc.c",
          "plsplugins.c",
          "log.c",
          "plugin.c",
          "magic.c",
          "ringbuf.c",
        ]

def config(env):
        pluginenv = env.Copy()
        env.Prepend(LIBPATH=["src/lib/xmmsipc"])
        env.Prepend(LIBPATH=["src/lib/xmmssocket"])
        env.Append(LIBS=['xmmsipc'])
        env.Append(LIBS=["xmmssocket"])
        env.Append(CPPPATH=["#src/includepriv"])
        env.pkgconfig("glib-2.0 >= 2.6.0", fail=True)
        env.pkgconfig("gmodule-2.0", fail=True)
        env.pkgconfig("gthread-2.0", fail=True)
        env.pkgconfig("sqlite3", fail=True)
        
        if env.platform != 'win32':
                env.checklib("m", "sin", fail=True)
        # we have a xmms2d - we might want plugins!
        pluginenv.handle_targets("Plugin")
        env.Append(LIBS=["wsock32"])
        env.Append(LIBS=["ws2_32"])
</pre>

'''src/xmms/main.c line 53''' :
*replace
<pre>
#include <pthread.h>
</pre>
:with :
<pre>
#ifndef __WIN32__
#include <pthread.h>
#else
#include <windows.h>
#include <time.h>
#define sleep(x) Sleep(x)
#endif
</pre>

'''src/xmms/main.c line 133''' :
*replace
<pre>
		mkdir (scriptdir, 0755);
</pre>
:with :
<pre>
#ifdef __WIN32__
		mkdir (scriptdir);
#else
		mkdir (scriptdir, 0755);
#endif
</pre>

'''src/xmms/main.c line 178''' :
*replace
<pre>
		mkdir (configdir, 0755);
</pre>
:with :
<pre>
#ifdef __WIN32__
		mkdir (configdir);
#else
		mkdir (configdir, 0755);
#endif
</pre>

'''src/xmms/main.c line 298''' :
*replace
<pre>
static gboolean
symlink_file (gchar *source, gchar *dest)
{
	gint r;

	g_return_val_if_fail (source, FALSE);
	g_return_val_if_fail (dest, FALSE);

	r = symlink (source, dest);

	return r != -1;
}
</pre>
:with :
<pre>
static gboolean
symlink_file (gchar *source, gchar *dest)
{
#ifndef __WIN32__
	gint r;

	g_return_val_if_fail (source, FALSE);
	g_return_val_if_fail (dest, FALSE);

	r = symlink (source, dest);

	return r != -1;
#else
	return 1;
#endif
}
</pre>

'''src/xmms/main.c line 394''' :
*replace
<pre>
	sigaddset (&signals, SIGHUP);
	sigaddset (&signals, SIGTERM);
	sigaddset (&signals, SIGINT);
	sigaddset (&signals, SIGPIPE);
	pthread_sigmask (SIG_BLOCK, &signals, NULL);
</pre>
:with :
<pre>
#ifndef __WIN32__
	sigaddset (&signals, SIGHUP);
	sigaddset (&signals, SIGTERM);
	sigaddset (&signals, SIGINT);
	sigaddset (&signals, SIGPIPE);
	pthread_sigmask (SIG_BLOCK, &signals, NULL);
#endif
</pre>

'''src/xmms/mediainfo.c line 36''' :
*add
<pre>
#ifdef __WIN32__
#include <time.h>
#endif
</pre>

'''src/xmms/output.c line 38''' :
*add
<pre>
#ifdef __WIN32__
#include <windows.h>
#define sleep(x) Sleep(x)
#endif
</pre>

'''src/xmms/unixsignal.c line 40''' :
*add at the start of the function ''sigwaiter''
<pre>
#ifndef __WIN32__
</pre>
:and put at the end of the function
<pre>
#endif
</pre>

'''src/xmms/unixsignal.c line 72''' :
*add at the start of the function ''xmms_signal_init''
<pre>
#ifndef __WIN32__
</pre>
:and put at the end of the function
<pre>
#endif
</pre>

'''src/xmms/ipc.c line 22''' :
*replace
<pre>
#include <sys/select.h>
</pre>
:with :
<pre>
#ifndef __WIN32__
#include <sys/select.h>
#endif
</pre>

'''src/xmms/ipc.c line 440''' :
*replace
<div style="color:red">Warning; this will cause the daemon not to work, TODO !</div>
<pre>
	if (pipe (wakeup) == -1) {
		xmms_log_error ("Could not create a pipe for client, too low rlimit or fdleak?");
		return NULL;
	}

	flags = fcntl (wakeup[0], F_GETFL, 0);
	if (flags != -1) {
		flags |= O_NONBLOCK;
		fcntl (wakeup[0], F_SETFL, flags);
	}

	flags = fcntl (wakeup[1], F_GETFL, 0);
	if (flags != -1) {
		flags |= O_NONBLOCK;
		fcntl (wakeup[1], F_SETFL, flags);
	}
</pre>
:with :
<pre>
#ifndef __WIN32__
        if (pipe (wakeup) == -1) {
		xmms_log_error ("Could not create a pipe for client, too low rlimit or fdleak?");
		return NULL;
	}

	flags = fcntl (wakeup[0], F_GETFL, 0);
	if (flags != -1) {
		flags |= O_NONBLOCK;
		fcntl (wakeup[0], F_SETFL, flags);
	}

	flags = fcntl (wakeup[1], F_GETFL, 0);
	if (flags != -1) {
		flags |= O_NONBLOCK;
		fcntl (wakeup[1], F_SETFL, flags);
	}
#endif
</pre>

'''src/plugins/diskwrite/Plugin'''<br />
'''src/plugins/eq/Plugin'''<br />
'''src/plugins/file/Plugin'''<br />
'''src/plugins/html/Plugin'''<br />
'''src/plugins/m3u/Plugin'''<br />
'''src/plugins/null/Plugin'''<br />
'''src/plugins/pls/Plugin'''<br />
'''src/plugins/replaygain/Plugin'''<br />
'''src/plugins/wave/Plugin''' :

*add the following at the end :
<pre>
def config(env):
	if env.platform == 'win32':
		env.Prepend(LIBPATH=["src/xmms"])
		env.Append(LIBS=['xmms2d'])
		env.pkgconfig("glib-2.0 >= 2.6.0", fail=True)
</pre>

'''src/plugins/file/file.c line 29''' :
*add
<pre>
#include <stdio.h>
</pre>

'''src/xmms/xmms2-launcher.c line 40''' :
*add at the start of the main function
<pre>
#ifndef __WIN32__
</pre>
*and at the end of the main function (before ''exit(0)''):
<pre>
#else
	system("xmms2d.exe");
#endif
	exit (0);
</pre>

'''src/xmms/Program line 37''' :
*replace
<pre>
	if env.platform != 'win32':
		env.checklib("m", "sin", fail=True)
</pre>
:with :
<pre>
	if env.platform != 'win32':
		env.checklib("m", "sin", fail=True)
	else:
		env.Append(LIBS=["wsock32"])	
		env.Append(LIBS=["ws2_32"])
</pre>

'''src/xmms/plugin.c line 38''' :
*replace
<pre>
#ifdef XMMS_OS_DARWIN
# define XMMS_LIBSUFFIX ".dylib"
#elif XMMS_OS_HPUX11 && !defined(__LP64__)
# define XMMS_LIBSUFFIX ".sl"
#else
# define XMMS_LIBSUFFIX ".so"
#endif
</pre>
:with :
<pre>
#ifdef XMMS_OS_DARWIN
# define XMMS_LIBSUFFIX ".dylib"
#elif XMMS_OS_HPUX11 && !defined(__LP64__)
# define XMMS_LIBSUFFIX ".sl"
#elif defined(XMMS_OS_WIN32)
# define XMMS_LIBSUFFIX ".dll"
#else
# define XMMS_LIBSUFFIX ".so"
#endif
</pre>

==Compilation==
*Double click on the MSYS icon that have been placed on the desktop, or launch msys.bat from the '''C:\xmms2_mingw''' directory
*Extract the needed libraries like this :
 tar zxf xmms2_required_libraries.tar.gz -C /
*Type :
 export PKG_CONFIG_PATH=/usr/lib/pkgconfig/
*Go in the directory '''/home/<user>/xmms2-stable.git...''' and type
 scons.sh

==Test xmms2==
*Download [http://exodus.xmms.se/~nano/win32/xmms-runtime.tar.gz xmms-runtime.tar.gz], extract it and copy the files from the '''xmms2_runtime''' directory to '''C:\xmms2'''
*Copy the following files to '''C:\xmms2''' :
<pre>
 src/clients/lib/xmmsclient/libxmmsclient.dll
 src/clients/lib/xmmsclient-glib/libxmmsclient-glib.dll
 src/xmms/libxmms2d.dll
 src/clients/cli/xmms2.exe
 src/xmms/xmms2d.exe
</pre>
:and the file ''src/plugins/null/libxmms_null.dll'' to '''C:\xmms2\plugins'''
Or run this script from '''/home/<user>/xmms2-stable.git...''' :
<pre>
#!/usr/bin/sh
rm -f /c/xmms2/libxmmsclient.dll
rm -f /c/xmms2/libxmmsclient-glib.dll
rm -f /c/xmms2/libxmms2d.dll
rm -f /c/xmms2/xmms2.exe
rm -f /c/xmms2/xmms2d.exe
rm -f /c/xmms2/plugins/libxmms_null.dll

mkdir -p /c/xmms2/plugins

cp ./src/clients/lib/xmmsclient/libxmmsclient.dll /c/xmms2
cp ./src/clients/lib/xmmsclient-glib/libxmmsclient-glib.dll /c/xmms2
cp ./src/xmms/libxmms2d.dll /c/xmms2
cp ./src/clients/cli/xmms2.exe /c/xmms2
cp ./src/xmms/xmms2d.exe /c/xmms2
cp ./src/plugins/null/libxmms_null.dll /c/xmms2/plugins
</pre>

*Go in '''/c/xmms2''' (from msys) (equivalent to ''C:\xmms2'') and start the daemon :
 ./xmms2d.exe -p ./plugins -i tcp://127.0.0.1:1234 -v
:Hopefully, you will see that the null output is used
*In another console, type :
<pre>
export XMMS_PATH=tcp://127.0.0.1:1234
</pre>
*Run xmms2 and debug to see why it's not working ?!
<pre>
cd /c/xmms2 && ./xmms2.exe
</pre>
*Debug informations :
:*The client sends the hello command and remains in the function xmmsc_ipc_wait_for_event (src/clients/lib/xmmsclient/ipc.c) which is called every X seconds.
:*The server never goes in the function xmms_ipc_source_accept (src/xmms/ipc.c).